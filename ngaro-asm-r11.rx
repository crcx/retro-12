( Ngaro Assembler                                             )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This implements the basic core of an assembler for Ngaro.   )
( It derives from the metacompiler used by Retro 11.x, but is )
( simplified overall, and does not attempt to implement a     )
( machine forth subset.                                       )
(                                                             )
( This is also better documented and organized into sections  )
( that should hopefully be understandable and logical.        )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This assumes that code using it will follow a structure of: )
(                                                             )
( include ngaro-asm.rx                                        )
( beginApplication                                            )
(   ... application code + data ...                           )
(                                                             )
(   label: main                                               )
(     ... main code ...                                       )
(                                                             )
( main setEntryPoint                                          )
( "imageName" saveImageAs                                     )
( bye                                                         )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


( Dependencies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
chain: files'
{{
  variables| fid fsize active |
  : io     (  n-f )  4 out wait 4 in ;
  : done   ( nn-  )  2drop active off ;
---reveal---
  0 constant :R
  1 constant :W
  2 constant :A
  3 constant :M
  : open   (  $m-h ) -1 io ;
  : read   (   h-f ) -2 io ;
  : write  (  ch-f ) -3 io ;
  : close  (   h-f ) -4 io ;
  : pos    (   h-n ) -5 io ;
  : seek   (  nh-f ) -6 io ;
  : size   (   h-n ) -7 io ;
  : delete (   $-n ) -8 io ;
  : slurp  (  a$-n )
    swap ^buffer'set :R open dup size [ dup read ^buffer'add ] times close drop ^buffer'size ;
  : spew   (  an$-n )
    :W open !fid 0 !fsize
    [ @+ @fid write drop fsize ++ ] times drop
    @fid close drop @fsize ;
  : readLine ( h-a )
    active on
    tib [ over read dup 10 13 within
          [ drop 0 swap ! drop active off ] [ swap !+ ] if @active ] while
    tib tempString ;
  : writeLine ( $h- )
    !fid active on
    [ @+ dup 0 == &done [ @fid write drop ] if @active ] while
    10 @fid write drop ;
}}
;chain

( Configuration ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
8192 constant IMAGE-SIZE


( Create Image Buffer ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

create image
    IMAGE-SIZE allot

variables| target origin fid |
image [ !target ] [ !origin ] bi



( Code to Save Image File ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( This will write out the image to a new file on disk. It     )
( does not alter the existing image.                          )
(                                                             )
( An image file consists of 32-bit values, but the file model )
( in Ngaro only allows for reading and writing 8-bit bytes.   )
( We have a couple of routines here that split each cell      )
( into bytes, masking off the extra bits. Then we write them  )
( to disk in little endian format.                            )

: writeByte ( n- )
  @fid ^files'write drop ;

: applyMask ( n- )
  %00000000000000000000000011111111 and ;

: writeCell ( n- )
       dup applyMask writeByte
  8 >> dup applyMask writeByte
  8 >> dup applyMask writeByte
  8 >>     applyMask writeByte ;

: saveImageAs ( $- )
  ^files':W ^files'open !fid
  cr @target @origin - putn " cells used\n" puts
  image @target @origin - [ @+ writeCell ] times drop
  @fid ^files'close drop ;


( Map Byte Codes to Symbolic Names ~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( To avoid naming conflicts with Retro, all of these end in a )
( comma.                                                      )

: ,  ( n-  ) @target !+ !target ;
: vm: ( n"- ) ` : .data ` , ` ; ;
   0 vm: nop,          1 vm: lit,          2 vm: dup,
   3 vm: drop,         4 vm: swap,         5 vm: push,
   6 vm: pop,          7 vm: loop,         8 vm: jump,
   9 vm: return,      10 vm: >jump,       11 vm: <jump,
  12 vm: !jump,       13 vm: =jump,       14 vm: @,
  15 vm: !,           16 vm: +,           17 vm: -,
  18 vm: *,           19 vm: /mod,        20 vm: and,
  21 vm: or,          22 vm: xor,         23 vm: <<,
  24 vm: >>,          25 vm: 0;,          26 vm: 1+,
  27 vm: 1-,          28 vm: in,          29 vm: out,
  30 vm: wait,


( Remaining Assembler Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

: here        (  -n ) @target @origin - ;
: label:      ( "-  ) here constant @last d->name cr puts ': putc @last d->xt @ putn cr ;
: #           ( n-  ) lit, , ;
: $,          ( $-  ) withLength [ @+ , ] times 0 , drop ;

: call:  ( "-  ) ' , ;
: jump:  ( "-  ) jump, ' , ;
: REPEAT (  -a ) here ;
: AGAIN  ( a-  ) jump, , ;

: setEntryPoint ( a- )  image 1 + ! ;

: setAddressTo ( a- ) image + !target ;

: beginApplication
  jump, 0 ,
  32 [ 0 , ] times ;

{{
  : cond ( -a ) @target 0 , ;
---reveal---
  : =if  ( -a ) !jump, cond ;
  : <if  ( -a ) >jump, cond ;
  : >if  ( -a ) <jump, cond ;
  : !if  ( -a ) =jump, cond ;
  : then ( a- ) here swap ! ;
}}

: dump
  image here [ @+ cr '# putc putn space "slice-store" puts ] times cr ;
