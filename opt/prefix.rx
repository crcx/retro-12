create prefix
  95 , 95 , 95 , 0 ,

: prefix:set
  prefix 2 + ! ;

: prefix:seek
  prefix find 0 <> [ tib 1 + swap dup d->xt @ swap d->class @ withClass ] [ drop default: notFound ] if ;

: <notFound>
  tib @ prefix:set prefix:seek ;

' <notFound> is notFound




{{
  : s>d find drop ;
  : xt:class ( d-aa ) dup d->xt @ swap d->class @ withClass ;
---reveal---
  : __&  ( a-a ) s>d d->xt @ .data          ; immediate
  : __@  ( a-n ) s>d xt:class &@ xt->d xt:class  ; immediate
  : __!  ( na- ) s>d xt:class &! xt->d xt:class  ; immediate
  : __+  ( na- ) s>d xt:class &+! xt->d .function ; immediate
  : __-  ( na- ) s>d xt:class &-! xt->d .function ; immediate
  : __2  ( a-  ) s>d &xt:class sip xt:class ; immediate
}}

: .parse  (  a- ) do ;
: parsing (   - ) &.parse reclass ;

{{
  : number ( a- ) base @ [ do toNumber .data ] dip base ! ;
---reveal---
  : __$   ( $-n ) &hex     number ; parsing
  : __#   ( $-n ) &decimal number ; parsing
  : __%   ( $-n ) &binary  number ; parsing
  : __'   ( $-n ) @ .data         ; parsing
}}

{{
  variable end
  : pad     (  -a ) STRING-LENGTH 2 * here + ;
  : keep    (  -  ) @compiler &keepString &tempString if .data ;
  : >pad    ( $-$ ) pad over getLength 1+ copy pad keep ;
  : chop    ( $-$ ) end -- 0 @end ! ;
  : >$      ( n-  ) dup 8 = [ chop drop ] [ @end !+ !end ] if ;
  : end?    ( $-$ ) @end @1- '" = [ chop >pad -1 ] [ 0 ] if ;
  : withPad ( q-  ) 32 pad 1- ! &pad &tib :is do &tib :devector ;
  : get     (  -c ) getc dup putc ;
---reveal---
  : __"  ( "-a )
    dup withLength + !end
    end? [ 32 >$ [ end? [ 0 ] [ get >$ -1 ] if ] while ] if-false ; parsing
  : "    ( "-$ ) [ '" accept pad 1- keep ] withPad ; immediate
}}

