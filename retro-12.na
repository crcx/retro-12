( Retro ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copyright [c] 2008 - 2014, Charles Childers                                 )
( Copyright [c] 2009 - 2010, Luke Parrish                                     )
( Copyright [c] 2010,        Marc Simpson                                     )
( Copyright [c] 2010,        Jay Skeer                                        )
( Copyright [c] 2012,        Michal J Wallace                                 )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Memory Map:                                                                 )
(                                                                             )
( 0  jump to main                                                             )
( 3  last                                                                     )
( 4  heap                                                                     )
( .. other variables                                                          )
( .. functions                                                                )
( .. main entry point                                                         )
( .. dictionary headers                                                       )
( .. actual start of heap                                                     )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

include ngaro-asm.rx

devector keymap:handler

( We need certain helper functions. These are:                                )
( heapBeginsHere   patches the heap variable to point to the start of unused  )
(                  memory                                                     )
( assignName:      given an address and class, assigns the following name to  )
(                  it. this is used to build the initial dictionary           )
( vector           lays down two nop, instructions so that the function can   )
(                  be redefined as a vector later on                          )

: heapBeginsHere
  here image 4 + ! ;

: last-entry
  image 3 + ;

: <link>        last-entry @ , ;
: <class>       , ;
: <xt>          , ;
: <additional>  0 , ;
: <name>        here 1+ , getToken $, ;
: assignName:   here [ <link> <class> <xt> <additional> <name> ] dip last-entry ! ;

: vector
  nop, nop, ;


( and now the retro kernel begins                                             )
beginApplication

3 setAddressTo

label: last      0 ,
label: heap      0 ,
label: compiler  0 ,
label: which     0 ,

label: memory    0 ,

32 setAddressTo

label: copytag   "Retro" $,
label: version   "12.0" $,
label: build     "2014.04.07" $,
label: okmsg     "ok  " $,

label: comma
  vector
  heap # @, dup, 1+, push, !, pop, heap # !,
  return,

label: withClass
  vector
  1-, push,
  return,

label: .function
  vector
  compiler # @, 0 # !if call: comma return, then jump: withClass

label: .immediate
  vector
  jump: withClass

label: .data
  vector
  compiler # @, 0;, drop, 1 # call: comma call: comma
  return,

label: dup
  vector
  dup,
  return,

label: 1+
  vector
  1+,
  return,

label: 1-
  vector
  1-,
  return,

label: swap
  vector
  swap,
  return,

label: drop
  vector
  drop,
  return,

label: and
  vector
  and,
  return,

label: or
  vector
  or,
  return,

label: xor
  vector
  xor,
  return,

label: @
  vector
  @,
  return,

label: !
  vector
  !,
  return,

label: +
  vector
  +,
  return,

label: -
  vector
  -,
  return,

label: *
  vector
  *,
  return,

label: /mod
  vector
  /mod,
  return,

label: <<
  vector
  <<,
  return,

label: >>
  vector
  >>,
  return,

label: out
  vector
  out,
  return,

label: in
  vector
  in,
  return,

label: wait
  vector
  0 # 0 # out, wait,
  return,

label: over
  vector
  push, dup, pop, swap,
  return,

label: not
  vector
  -1 # xor,
  return,

label: on
  vector
  -1 # swap, !,
  return,

label: off
  vector
  0 # swap, !,
  return,

label: /
  vector
  /mod, swap, drop,
  return,

label: mod
  vector
  /mod, drop,
  return,

label: negate
  vector
  -1 # *,
  return,

label: do
  vector
  1-, push,
  return,

label: @+
  vector
  dup, 1+, swap, @,
  return,

label: !+
  vector
  dup, 1+, push, !, pop,
  return,

label: here
  vector
  heap # @,
  return,

label: ;;
  vector
  9 # call: comma
  return,

label: ;
  vector
  call: ;;
  compiler #
  call: off
  return,

label: ($,)
  vector
  REPEAT
    call: @+
    0;,
    call: comma
  AGAIN
  return,

label: $
  vector
  call: ($,)
  drop,
  0 #
  call: comma
  return,

label: push
  vector
  5 # call: comma
  return,

label: pop
  vector
  6 # call: comma
  return,

label: 0;
  vector
  25 # call: comma
  return,

label: repeat
  vector
  call: here
  return,

label: again
  vector
  8 #
  call: comma
  call: comma
  return,

label: update
  -1 ,

label: redraw
  vector
  update # @, 0;, drop, 0 # 3 # out,
  return,

label: putc
  vector
  0;, 1 # 2 # out,
  call: wait
  call: redraw
  return,

label: cr
  vector
  10 #
  call: putc
  return,

label: (puts)
  vector
  REPEAT
    call: @+
    0;,
    call: putc
  AGAIN
  return,

label: <puts>
  vector
  call: (puts)
  drop,
  return,

label: puts
  vector
  call: <puts>
  return,

label: break
  0 ,

label: STRING-LENGTH
  vector
  256 #
  return,

label: STRING-BUFFERS
  vector
  12 #
  return,

label: tib
  vector
  memory #
  @,
  call: STRING-LENGTH
  -,
  return,

label: getc:unfiltered
  vector
   1 # 1 # out,
   call: wait
   1 # in,
   return,

label: getc
  vector
  REPEAT
    call: getc:unfiltered
    dup,
    10 #
    =if
      drop,
      32 #
    then
    dup,
    13 #
    =if
      drop,
      32 #
    then
    dup,
    0 #
    !if
      return,
    then
    drop,
  AGAIN
  return,


label: putc?
  vector
  dup,
  8 # =if drop, break # @, return, then dup, call: putc return,

label: eat
  vector
   REPEAT
     call: getc
     call: putc?
     dup,
     break # @,
     !if swap, call: !+ return, then
     drop,
  AGAIN
  return,

label: guard?
  vector
  dup,
  1+,
  call: tib
  <if drop, call: tib return, then 8 # call: putc
  return,

label: (accept)
  vector
  REPEAT
    call: getc
    dup, 8 # =if drop, 1-, call: guard? jump: (accept) then
    dup,
    call: putc
    dup, break # @, =if drop, return, then
    swap,
    call: !+
  AGAIN
  return,

label: accept
  vector
  break # !,
  call: tib
  call: eat
  call: (accept)
  0 #
  swap,
  call: !+
  drop,
  return,

label: is-vector
  -1 ,

label: d->class
  vector
  1+,
  return,

label: d->xt
  vector
  1+, 1+,
  return,

label: d->additional
  vector
  3 # +,
  return,

label: d->name
  vector
  4 # +,
  return,

label: header
  vector
  push,
  call: here        ( Entry Start      )
  last # @,         ( Link to previous )
  call: comma
  last # !,         ( Set as newest    )
  .data #           ( Class = .data    )
  call: comma
  call: here
  0 #               ( XT               )
  call: comma
  0 #               ( Pointer to additional )
  call: comma
  pop,
  call: here        ( Pointer to name  )
  1+,
  call: comma
  call: $           ( String for name  )
  call: here
  swap, !,
  return,           ( Patch XT to HERE )

label: words
  last #
  REPEAT
    @,
    0;,
    dup,
    call: d->name
    @,
    call: puts
    32 #
    call: putc
  AGAIN


label: create
  vector
  32 #
  call: accept
  call: tib
  call: header
  return,

label: [[
  vector
  compiler #
  call: off
  return,

label: ]]
  vector
  compiler #
  jump: on

label: vector?
  vector
  is-vector # @,
  0;, drop,
  0 #
  call: comma
  0 #
  call: comma
  return,

label: :
  vector
  call: create
  .function #
  last #
  @,
  call: d->class
  !,
  call: vector?
  jump: ]]

label: t-(
  vector
  ') #
  call: accept
  return,

label: quote       ( -a  ) ( -- runtime -------------------------------- )
  vector
  pop, 1+,         (   -a  | grab the return address, add 1, and )
  dup,             (  a-aa | dup, giving two pointers to ADDR    )
  @,               ( aa-aA | dereference one for actual target   )
  1-,              ( aa-aA | subtract 1 because ip++ in ngaro vm )
  push,            ( aA-a  | push result to do a calculated jump )
  1+, return,      (  a-a  | point to start of code, jump to end )

label: [         ( -- compile-time---------------------------- )
  vector
  quote #      (   -   | compile a call to quote             )
  call: comma
  call: here     (   -a  | remember where to put ADDR          )
  0 #            (  a-a  | leave a cell to hold it later       )
  call: comma
  compiler # @,  (  a-af | store current compiler state        )
  compiler #     ( af-af | turn the compiler on                )
  call: on
  return,

label: ]         ( a = placeholder for quote jump, f = old compile state  )
  vector
   call: ;;      ( af-af | compile a return from quoted code   )
   compiler # !, ( af-a  | restore compiler state              )
   call: here    (  a-aA | now we know what ADDR should be     )
   call: over !, ( aA-a  | so go replace the 00                )
   compiler # @, (  a-af | recall current compile state        )
   0 # =if       ( af-a  | are we outside of the compiler?     )
                 ( -- runtime -------------------------------- )
     1+, return,       (  a-a  | for interactive, keep ptr to start  )
                 ( -- compile-time---------------------------- )
   then drop, return,  (  a-   | inside compile mode, just discard.  )
                 (       | the call to 'quote will restore it  )
                 (       | when the containing function runs   )


label: empty return,

label: if
  vector
  push, swap, pop, swap, 0 # !if drop, call: do return, then swap, drop, call: do return,

label: ifTrue
  vector
  empty # call: if return,

label: ifFalse
  vector
  empty # swap, call: if return,

label: dip
  vector
  swap, push, call: do pop, return,

label: sip
  vector
  call: over do # call: dip return,

label: false
  vector
  0 # return,

label: true
  vector
  -1 # return,

label: =  ( xy-f  ) vector =if jump: true  then jump: false
label: <> ( xy-f  ) vector !if jump: true  then jump: false
label: >= ( xy-f  ) vector >if jump: true  then jump: false
label: <= ( xy-f  ) vector <if jump: true  then jump: false
label: <  ( xy-f  ) vector >if jump: false then jump: true
label: >  ( xy-f  ) vector <if jump: false then jump: true


label: compare
  vector 
   REPEAT
     dup, @, push, 1+, swap,
     dup, @, push, 1+, pop, dup, pop,
     !if drop, drop, dup, xor, return, then
   0 # 12 , ,
   drop, drop, -1 # return,

label: count
  vector 
  REPEAT
    call: @+
    0;,
    drop,
  AGAIN
  return,

label: getLength
  vector 
  dup,
  call: count
  1-,
  swap,
  -,
  return,

label: withLength
  vector 
  dup,
  call: getLength
  return,

label: string
  vector 
  pop,
  call: count
  1-,
  push,
  return,

label: keepString
  vector 
  string #
  call: comma
  call: here
  swap,
  call: $
  return,

label: :devector
  vector 
  0 #
  swap,
  call: !+
  0 #
  swap,
  !,
  return,

label: :is
  vector 
  8 #
  swap,
  call: !+
  !,
  return,

label: t-"
  vector 
  '" #
  call: accept
  call: tib
  return,

label: #value
  0 ,

label: num
  0 ,

label: negate?
  0 ,

label: flag
  0 ,

label: base
  10 ,

label: numbers
  "0123456789ABCDEF" $,

label: nums
  vector 
  numbers #
  return,

label: @base
  vector 
  base #
  @,
  return,

label: (digits)
  vector 
  call: nums
  +,
  @,
  call: over
  =if
    num #
    call: on
  then
  return,

label: digits
  vector 
  1-,
  REPEAT
    dup,
    push,
      call: (digits)
    pop,
    0;,
    1-,
  AGAIN
  return,

label: valid?
  vector 
  call: @base
  dup,
  16 #
  <if
    call: digits
    return,
  then
  drop,
  return,

label: digit?
  vector 
  num #
  call: off
  call: valid?
  drop,
  num #
  @,
  return,

label: toDigit
  vector 
  '0 #
  -,
  call: @base
  16 #
  =if
    dup,
    16 #
    >if
      7 #
      -,
    then
  then
  return,

label: isNegative?
  vector 
  dup,
  @,
  '- #
  =if
    negate? #
    call: on
    1+,
    return,
  then
  1 #
  negate? #
  !,
  return,

label: (convert)
  vector 
  REPEAT
    dup, @, 0;, call: toDigit #value # @, call: @base *, +, #value # !, 1+,
  AGAIN return,

label: toNumber
  vector 
  call: isNegative? 0 # #value # !, call: (convert) drop, #value # @, negate? # @, *, return,

label: (isnumber)
  vector 
  REPEAT
    dup,
    @,
    0;,
    call: digit?
    flag #
    @,
    and,
    flag #
    !,
    1+,
  AGAIN
  return,

label: isNumber?
  vector 
  call: isNegative?
  flag #
  call: on
  call: (isnumber)
  drop,
  flag #
  @,
  return,

label: boot
  vector 
  copytag #
  call: puts
  32 #
  call: putc
  version #
  call: puts
  call: cr
  return,

label: query
  vector 
  5 #
  out,
  call: wait
  5 # in,
  return,

label: run-on-boot
  vector 
  -1  # call: query memory # !,  ( Memory Size     )
  call: boot
  return,

label: name
  0 ,

label: found
  0 ,

label: prepare
  vector 
  found #
  call: off
  name #
  !,
  last #
  @,
  return,

label: done
  vector 
  which #
  @,
  found #
  @,
  return,

label: match?
  vector
  dup,
  call: d->name
  @,
  name #
  @,
  call: compare
  return,

label: <search>
  vector
  REPEAT
    call: match?
    0 #
    !if
      which #
      !,
      found #
      call: on
      return,
    then
    @,
    0;,
  AGAIN
  return,

label: find
  vector 
  call: prepare
  call: <search>
  call: done
  return,

label: '
  vector 
  32 #
  call: accept
  call: tib
  call: find
  0 #
  !if
    call: d->xt
    @,
    return,
  then
  drop,
  0 #
  return,

label: xt:class
  vector 
  dup,
  call: d->xt
  @,
  swap,
  call: d->class
  @,
  return,

label: notFound
  vector 
  call: cr
  call: tib
  call: puts
  32 #
  call: putc
  '? #
  call: putc
  call: cr
  return,

label: ok
  vector 
  compiler #
  @,
  call: not
  0;,
  drop,
  call: cr
  okmsg #
  call: puts
  return,

label: build#
  vector 
  call: tib
  call: toNumber
  .data #
  jump: withClass

label: number
  vector 
  call: tib
  call: isNumber?
  0 #
  !if
    jump: build#
  then
  jump: notFound

label: process
  vector 
  0 #
  !if
    call: xt:class
    jump: withClass
  then
  drop,
  jump: number

label: listen
  vector 
  REPEAT
    call: ok
    32 #
    call: accept
    call: tib
    call: find
    call: process
  AGAIN
  return,

label: save-image
  vector 
  1 #
  4 #
  out,
  call: wait
  return,

label: goodbye
  vector 
  call: cr
  -9 # 5 # out,
  call: wait
  return,

label: main
  vector 
  call: run-on-boot
  jump: listen


dup            .data assignName: dup
1+             .data assignName: 1+
1-             .data assignName: 1-
swap           .data assignName: swap
drop           .data assignName: drop
and            .data assignName: and
or             .data assignName: or
xor            .data assignName: xor
@              .data assignName: @
!              .data assignName: !
+              .data assignName: +
-              .data assignName: -
*              .data assignName: *
/mod           .data assignName: /mod
<<             .data assignName: <<
>>             .data assignName: >>
out            .data assignName: out
in             .data assignName: in
=              .function assignName: =
<>             .function assignName: <>
>=             .function assignName: >=
<=             .function assignName: <=
>              .function assignName: >
<              .function assignName: <
wait           .function assignName: wait
over           .function assignName: over
not            .function assignName: not
on             .function assignName: on
off            .function assignName: off
/              .function assignName: /
mod            .function assignName: mod
negate         .function assignName: negate
do             .function assignName: do
@+             .function assignName: @+
!+             .function assignName: !+
here           .function assignName: here
redraw         .function assignName: redraw
putc           .function assignName: putc
cr             .function assignName: cr
<puts>         .function assignName: <puts>
puts           .function assignName: puts
STRING-LENGTH  .function assignName: STRING-LENGTH
STRING-BUFFERS .function assignName: STRING-BUFFERS
tib            .function assignName: tib
getc           .function assignName: getc
accept         .function assignName: accept
d->class       .function assignName: d->class
d->xt          .function assignName: d->xt
d->additional  .function assignName: d->additional
d->name        .function assignName: d->name
header         .function assignName: header
create         .function assignName: create
]]             .function assignName: ]]
:              .function assignName: :
quote          .function assignName: quote
if             .function assignName: if
ifTrue         .function assignName: ifTrue
ifFalse        .function assignName: ifFalse
dip            .function assignName: dip
sip            .function assignName: sip
compare        .function assignName: compare
getLength      .function assignName: getLength
withLength     .function assignName: withLength
string         .function assignName: string
keepString     .function assignName: keepString
:devector      .function assignName: :devector
:is            .function assignName: :is
t-"            .function assignName: "
nums           .function assignName: numbers
toNumber       .function assignName: toNumber
isNumber?      .function assignName: isNumber?
boot           .function assignName: boot
find           .function assignName: find
'              .function assignName: '
notFound       .function assignName: notFound
ok             .function assignName: ok
listen         .function assignName: listen
save-image     .function assignName: save
goodbye        .function assignName: bye
comma          .function assignName: ,
withClass      .function assignName: withClass
.function      .function assignName: .function
.immediate     .function assignName: .immediate
.data          .function assignName: .data
last           .data assignName: last
compiler       .data assignName: compiler
memory         .data assignName: memory
heap           .data assignName: heap
which          .data assignName: which
base           .data assignName: base
update         .data assignName: update
version        .data assignName: version
build          .data assignName: build
is-vector      .data assignName: vector
;;             .immediate assignName: ;;
;              .immediate assignName: ;
push           .immediate assignName: push
pop            .immediate assignName: pop
0;             .immediate assignName: 0;
repeat         .immediate assignName: repeat
again          .immediate assignName: again
[[             .immediate assignName: [[
t-(            .immediate assignName: (
[              .immediate assignName: [
]              .immediate assignName: ]
words          .function  assignName: words

heapBeginsHere

main setEntryPoint
"retroImage" saveImageAs
.s
bye
