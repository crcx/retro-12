: true     -1 ;
: false     0 ;
: true?     true  = ;
: false?    false = ;
: if-true   [ ] if ;
: if-false  [ ] swap if ;

: negate     -1 * ;
: getLength dup [ repeat @+ 0; drop again ] do 1- swap - ;
: withLength dup getLength ;
: variable:  create , ;
: variable   0 variable: ;
: constant   create last @ d->xt ! ;
: string:    keepString constant ;
: +!         [ @ + ] sip ! ;
: -!         [ @ swap - ] sip ! ;
: allot      heap +! ;
: nip        swap drop ;
: rot        [ swap ] dip swap ;
: tuck       swap over ;
: ++         1 swap +! ;
: --         1 swap -! ;
: d'         ' drop which @ ;
: xt->d
  dup
  [ last repeat @ over over d->xt @ = [ nip 0 ] if-true 0; again ] do
  over over = [ - ] [ nip ] if ;
: reclass      (  a- ) last @ d->class ! ;
: ['] ' .data ; ' .immediate reclass
: immediate    (   - ) ['] .immediate reclass ;
: `     ( "-  )
  ' dup 0; 0 <> true?
  [ .data which @ d->class @ , ]
  [ tib isNumber? true?
    [ tib toNumber .data ['] .data , ] [ notFound ] if ] if ; immediate


create list
  0 , 0 ,

: {{
  last @ dup list !+ ! ;
: ---reveal---
  last @ list 1+ ! ;
: }}
  list @+ swap @ =
  [ list @ last ! ]
  [ list @ [ last repeat @ dup @ list 1+ @ <> 0; drop again ] do ! ] if ;

( Additional Combinators ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: while   (   q-    ) [ repeat dup dip swap 0; drop again ] do drop ;
: until   (   q-    ) [ repeat dup dip swap not 0; drop again ] do drop ;
: curry   (  nq-q   ) [ [ ` [ ] dip .data ] dip , ` ] ;
: take    (  qq-q   ) swap [ [ ` [ ] dip , ] dip .data ` ] ;
: bi      (  xqq-   ) [ sip ] dip do ;
: bi*     ( xyqq-   ) [ dip ] dip do ;
: bi@     (  xyq-   ) dup bi* ;
: tri     ( xqqq-   ) [ [ sip ] dip sip ] dip do ;
: tri*    ( xyzqqq- ) [ [ swap [ dip ] dip ] dip dip ] dip do ;
: tri@    ( xyzq-   ) dup dup tri* ;
: cons    (  ab-q   ) push push ` [ pop pop [ .data ] bi@ ` ] ;
: preserve ( aq-    ) swap [ @ ] sip [ [ do ] dip ] dip ! ;

: when    (  nqq-n  )
  [ over swap do ] dip swap
  [ do true ] [ drop false ] if 0; pop drop drop ;

: whend   ( nqq-? )
  [ over swap do ] dip swap
  [ nip do true ] [ drop false ] if 0; pop drop drop ;

: times (  nq-  )
  over 1 >= [ swap [[ here ]] [ dup dip ] dip [[ 7 , , ]] drop ] [ drop drop ] if ;

: fill   ( ann-  ) swap here ! [ here @ swap !+ ] times drop ;

: within ( xlu-f ) [ over ] dip <= [ >= ] dip and ;

: decimal ( - ) 10 base ! ;
: hex     ( - ) 16 base ! ;
: octal   ( - )  8 base ! ;
: binary  ( - )  2 base ! ;

{{
  create buf
  32 allot
  variable digits
  variable pos
  : split    (   n-... )
    repeat base @ /mod swap numbers + @ swap digits ++ 0; again ;
  : build    ( ...-    )
    buf pos @ [ pos @ swap !+ ] if-true
    digits @ [ !+ ] times 0 swap ! ;
  : negate?  (   n-n   ) dup 0 >= not 0; drop negate 45 pos ! ;
---reveal---
  : toString (   n-$   ) 0 pos ! 0 digits ! negate? split build buf ;
}}

: clear (  - ) -1 putc ;

: space (  - ) 32 putc ;

: putn  ( n- ) toString puts ;


( Core Strings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  variable next

  : buffers  ( -a )
    memory @       STRING-LENGTH   -  ( tib     )
                   STRING-LENGTH   -  ( scratch )
    STRING-BUFFERS STRING-LENGTH * -  ( buffers ) ;
---reveal---
  : tempString ( $-$ )
    withLength 1+
    next @ STRING-BUFFERS = [ 0 next ! ] if-true
    next @ STRING-LENGTH * buffers + [ swap copy ] sip
    next ++ ;
}}

( Debugging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : (.s)  0; 1- swap push (.s) pop dup putn space ;
---reveal---
  : depth   (    -n ) -5 5 out wait 5 in ;
  : reset   ( ...-  ) depth repeat 0; 1- nip again ;
  : .s      depth (.s) ;
}}

( Misc. Words ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: getToken ( "-$ ) 32 accept tib tempString ;
: getNumber ( "-n )  getToken toNumber ;
: :include ( $-  ) 2 4 out wait ;
: include  ( "-  ) getToken :include ;
